name: CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

permissions:
    contents: read
    id-token: write
    packages: write # needed to push docker image ecr

env:
  IMG_REPOSITORY: 471112537430.dkr.ecr.eu-west-1.amazonaws.com/alfred
  IMG_TAG: ${{ ecgo "$BRANCH" | sed 's/\//_/g }}
  AWS_REGION: eu-west-1
  ALFRED_VAULT_SECRET_PATH: "prcoach/data"

jobs:
  ####################################### Docker build & push #####################################
  #################################################################################################
  call-docker-build-push:
    name: Call Docker Build & Push
    uses: cisco-eti/gh-reusable-workflows/.github/workflows/build-push-docker.yaml@production
    secrets:
      # Only needed if with:ecr-enabled or with:gar-enabled is true below
      vault-approle-role-id: ${{ secrets.VAULT_APPROLE_ROLE_ID }}
      vault-approle-secret-id: ${{ secrets.VAULT_APPROLE_SECRET_ID }}
      ghcr-username: ${{ secrets.GHCR_USERNAME }}
      ghcr-token: ${{ secrets.GHCR_TOKEN }}
      ghcr-org-token: ${{ secrets.GHCR_TOKEN }}
    with:
      ### REQUIRED
      runner-group: ${{ vars.DEFAULT_EC2_RUNNER_GROUP }}
      ### Docker image name
      image-name: ${{ vars.IMG_REPOSITORY }}
      context: .
      ### Dockerfile alternate name. Default is Dockerfile (relative to context path)
      dockerfile: docker/Dockerfile
      ### REQUIRED
      ### ENABLE ONE OR BOTH REGISTRIES
      ### tell docker where to push.
      ecr-enabled: true
      artifactory-devhub-enabled: false
      ghcr-enabled: false
      private-ecr-region: ${{ vars.AWS_REGION }}

  ################################## Deploy Lambda #######################################
  ########################################################################################
  deploy-lambda:
    name: Deploy Lambda
    needs: [ call-docker-build-push ]
    runs-on:
      group: ${{ vars.DEFAULT_EC2_RUNNER_GROUP }}
    container:
      image: ${{ vars.SRE_BUILD_IMAGE }}
      options: --user root
      credentials:
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: ''
          # Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
          # Default: true
          clean: false
          # Whether to download Git-LFS files
          # Default: false
          lfs: ''
          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          # recursively checkout submodules.
          # Default: false
          submodules: ''

      - name: Set path environment variables
        run: |
          echo "AZURE_SECRET_PATH=${{ env.ALFRED_VAULT_SECRET_PATH }}/azure-ai/gpt-4o" >> $GITHUB_ENV
          echo "GITHUB_SECRET_PATH=${{ env.ALFRED_VAULT_SECRET_PATH }}/gh" >> $GITHUB_ENV
          echo "LANGSMITH_SECRET_PATH=${{ env.ALFRED_VAULT_SECRET_PATH }}/langsmith" >> $GITHUB_ENV

      - name: Set secrets as environment variables
        uses: hashicorp/vault-action@v2.7.5
        with:
          url: ${{ vars.KEEPER_URL }}
          method: approle
          roleId: ${{ secrets.VAULT_OUTSHIFT_USERS_PHOENIX_APPROLE_ROLE_ID }}
          secretId: ${{ secrets.VAULT_OUTSHIFT_USERS_PHOENIX_APPROLE_SECRET_ID }}
          namespace: "${{ vars.VAULT_NAMESPACE }}/outshift-users"
          secrets: |
            ${{ env.AZURE_SECRET_PATH }}/azure-ai/gpt-4o  key1      |  AZURE_OPENAI_API_KEY;
            ${{ env.AZURE_SECRET_PATH }}/azure-ai/gpt-4o  endpoint  |  AZURE_OPENAI_ENDPOINT;

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: arn:aws:iam::471112537430:role/gha-alfred-role
          aws-region: eu-west-1

      - name: Display AWS Identity
        run: aws sts get-caller-identity

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Node Version
        run: node --version

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.3"

      - name: Terraform Version
        run: terraform version

      - name: Terraform Init
        run: |
          terraform -chdir=deployment/lambda init -backend-config="key=dev/terraform.tfstate"

      - name: Set Terraform Variables
        run: |
          echo "TF_VAR_azure_openai_api_key=$AZURE_OPENAI_API_KEY" >> $GITHUB_ENV
          echo "TF_VAR_image_name=$IMG_REPOSITORY" >> $GITHUB_ENV
          echo "TF_VAR_image_tag=$IMG_TAG" >> $GITHUB_ENV
          echo "TF_VAR_lambda_function_name=alfred-dev-cd" >> $GITHUB_ENV

      - name: Check variable
        run: |
          echo $TF_VAR_image_name
          echo $TF_VAR_image_tag
          echo $TF_VAR_lambda_function_name

      - name: Terraform Plan
        run: |
          terraform -chdir=deployment/lambda plan -input=false -var-file=deployment/cloud.tfvars

      - name: Terraform Apply
        run: |
          terraform -chdir=deployment/lambda apply -input=false -auto-approve -var-file=deployment/cloud.tfvars

  ################################## Send Status for PR Checks ###########################
  ########################################################################################
  # This Job is REQUIRED, it is what allwos for the WHOLE workflow to show up in the PR status checks as a requirement for branch rules
  reusable-workflow-ci-status:
    name: CD Status
    # This should be an array of ALL active jobs that are used/run
    needs: [ deploy-lambda, call-docker-build-push ]
    if: always()
    runs-on:
      group: ${{ vars.DEFAULT_EC2_RUNNER_GROUP }}
    steps:
      - name: report success
        if: ${{ cancelled() || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'failure') }}
        run: |
          echo -e "\033[31m*** WORKFLOW FAILED ***\033[0m"
          exit 1
      - name: report success
        run: |
          echo -e "\033[1;36m*** WORKFLOW SUCCEDED ***\033[0m"
          exit 0
