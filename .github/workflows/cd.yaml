name: CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
    contents: read
    id-token: write
    packages: write # needed to push docker image ecr

jobs:
  set-environment-variables:
    name: Set Environment Variables
    runs-on:
      group: ${{ vars.DEFAULT_EC2_RUNNER_GROUP }}
    outputs:
      image_name: ${{ steps.set-environment-variables.outputs.IMAGE_NAME }}
      image_tag: ${{ steps.set-environment-variables.outputs.IMAGE_TAG }}
      aws_region: ${{ steps.set-environment-variables.outputs.AWS_REGION }}
      ecr_private_registry_uri: ${{ steps.set-environment-variables.outputs.ECR_PRIVATE_REGISTRY_URI }}
      langchain_project: ${{ steps.set-environment-variables.outputs.LANGCHAIN_PROJECT }}
    steps:
      - name: Set environment variables
        id: set-environment-variables
        env:
          BRANCH: ${{ github.head_ref || github.ref_name }}

        run: |
          set -e
          
          export IMAGE_NAME=alfred
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
          
          export DATE=$(date +'%Y-%m-%d')
          echo "DATE=$DATE" >> $GITHUB_OUTPUT
          
          export AWS_REGION=eu-west-1
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_OUTPUT
          
          export SHA=${GITHUB_SHA::7}
          echo "SHA=$SHA" >> $GITHUB_OUTPUT
          
          export GIT_BRANCH=$(echo $BRANCH | sed 's/refs\/heads\///g')
          export IMAGE_TAG=$GIT_BRANCH-$DATE-$SHA
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          export LANGCHAIN_PROJECT=$IMAGE_NAME-$GIT_BRANCH-$DATE-$SHA
          echo "LANGCHAIN_PROJECT=$LANGCHAIN_PROJECT" >> $GITHUB_OUTPUT
          
          export ECR_PRIVATE_REGISTRY_URI=626007623524.dkr.ecr.eu-west-1.amazonaws.com
          echo "ECR_PRIVATE_REGISTRY_URI=$ECR_PRIVATE_REGISTRY_URI" >> $GITHUB_OUTPUT

      - name: Display Environment Variables
        env:
          IMAGE_NAME: ${{ steps.set-environment-variables.outputs.IMAGE_NAME }}
          IMAGE_TAG: ${{ steps.set-environment-variables.outputs.IMAGE_TAG }}
          AWS_REGION: ${{ steps.set-environment-variables.outputs.AWS_REGION }}
          ECR_PRIVATE_REGISTRY_URI: ${{ steps.set-environment-variables.outputs.ECR_PRIVATE_REGISTRY_URI }}
          LANGCHAIN_PROJECT: ${{ steps.set-environment-variables.outputs.LANGCHAIN_PROJECT }}
        run: |
          echo "IMAGE_NAME=$IMAGE_NAME"
          echo "IMAGE_TAG=$IMAGE_TAG"
          echo "AWS_REGION=$AWS_REGION"
          echo "ECR_PRIVATE_REGISTRY_URI=$ECR_PRIVATE_REGISTRY_URI"
          echo "LANGCHAIN_PROJECT=$LANGCHAIN_PROJECT"

  ####################################### Docker build & push #####################################
  #################################################################################################
  call-docker-build-push:
    name: Call Docker Build & Push
    needs: [ set-environment-variables ]
    uses: cisco-eti/gh-reusable-workflows/.github/workflows/build-push-docker.yaml@production
    secrets:
      # Only needed if with:ecr-enabled or with:gar-enabled is true below
      vault-approle-role-id: ${{ secrets.VAULT_APPROLE_ROLE_ID }}
      vault-approle-secret-id: ${{ secrets.VAULT_APPROLE_SECRET_ID }}
      ghcr-username: ${{ secrets.GHCR_USERNAME }}
      ghcr-token: ${{ secrets.GHCR_TOKEN }}
      ghcr-org-token: ${{ secrets.GHCR_TOKEN }}
    with:
      ### REQUIRED
      runner-group: ${{ vars.DEFAULT_EC2_RUNNER_GROUP }}
      ### Docker image name
      image-name: ${{ needs.set-environment-variables.outputs.image_name }}
      image-custom-tag: ${{ needs.set-environment-variables.outputs.image_tag }}
      context: .
      ### Dockerfile alternate name. Default is Dockerfile (relative to context path)
      dockerfile: docker/Dockerfile
      ### REQUIRED
      ### ENABLE ONE OR BOTH REGISTRIES
      ### tell docker where to push.
      ecr-enabled: true
      artifactory-devhub-enabled: false
      ghcr-enabled: false
      private-ecr-region: ${{ needs.set-environment-variables.outputs.aws_region }}
      build-args: "--platform=linux/amd64"

  ################################## Deploy Lambda #######################################
  ########################################################################################
  deploy-lambda:
    name: Deploy Lambda
    needs: [ call-docker-build-push, set-environment-variables ]
    runs-on:
      group: ${{ vars.DEFAULT_EC2_RUNNER_GROUP }}
    container:
      image: ${{ vars.SRE_BUILD_IMAGE }}
      options: --user root
      credentials:
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: ''
          # Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
          # Default: true
          clean: false
          # Whether to download Git-LFS files
          # Default: false
          lfs: ''
          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          # recursively checkout submodules.
          # Default: false
          submodules: ''

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: arn:aws:iam::471112537430:role/gha-alfred-role
          aws-region: eu-west-1

      - name: Display AWS Identity
        run: aws sts get-caller-identity

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Node Version
        run: node --version

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.3"

      - name: Terraform Version
        run: terraform version

      - name: Terraform Init
        run: |
          terraform -chdir=deployment/lambda init -backend-config="key=dev/terraform.tfstate" -reconfigure

      - name: Set Terraform Variables
        env:
          ECR_PRIVATE_REGISTRY_URI: ${{ needs.set-environment-variables.outputs.ecr_private_registry_uri }}
          IMAGE_NAME: ${{ needs.set-environment-variables.outputs.image_name }}
          IMAGE_TAG: ${{ needs.set-environment-variables.outputs.image_tag }}
          LANGCHAIN_PROJECT: ${{ needs.set-environment-variables.outputs.langchain_project }}
          AWS_REGION: ${{ needs.set-environment-variables.outputs.aws_region }}
        run: |
          echo "TF_VAR_image_repo=${{ env.ECR_PRIVATE_REGISTRY_URI }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_image_tag=$IMAGE_TAG" >> $GITHUB_ENV
          echo "TF_VAR_lambda_function_name=alfred-dev" >> $GITHUB_ENV
          echo "TF_VAR_langchain_project=$LANGCHAIN_PROJECT" >> $GITHUB_ENV
          echo "TF_VAR_aws_region=$AWS_REGION" >> $GITHUB_ENV
          echo "TF_VAR_aws_secret_region=$AWS_REGION" >> $GITHUB_ENV

      - name: Check variable
        run: |
          echo $TF_VAR_image_repo
          echo $TF_VAR_image_tag
          echo $TF_VAR_lambda_function_name
          echo "TF_VAR_langchain_project=$IMAGE_NAME-$IMAGE_TAG-$DATE-$SHA" >> $GITHUB_ENV
          echo "TF_VAR_aws_region=$TF_VAR_aws_region"
          echo "TF_VAR_aws_secret_region=$TF_VAR_aws_secret_region"

      - name: Terraform Plan
        run: |
          terraform -chdir=deployment/lambda plan -input=false -var-file=platforms/dev.tfvars

      - name: Terraform Apply
        run: |
          terraform -chdir=deployment/lambda apply -input=false -auto-approve -var-file=platforms/dev.tfvars

  ################################## Send Status for PR Checks ###########################
  ########################################################################################
  # This Job is REQUIRED, it is what allwos for the WHOLE workflow to show up in the PR status checks as a requirement for branch rules
  reusable-workflow-ci-status:
    name: CD Status
    # This should be an array of ALL active jobs that are used/run
    needs: [ set-environment-variables, deploy-lambda, call-docker-build-push ]
    if: always()
    runs-on:
      group: ${{ vars.DEFAULT_EC2_RUNNER_GROUP }}
    steps:
      - name: report success
        if: ${{ cancelled() || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'failure') }}
        run: |
          echo -e "\033[31m*** WORKFLOW FAILED ***\033[0m"
          exit 1
      - name: report success
        run: |
          echo -e "\033[1;36m*** WORKFLOW SUCCEDED ***\033[0m"
          exit 0
